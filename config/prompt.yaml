prompt_template: |
  You are controlling a one-armed robot.

  **Task Objective:**
  Your task is to complete the following goal:
  {goal}

  **Current Environment:**
  Before planning actions, analyze the image carefully, ensuring that all objects, particularly those relevant to the goal, are identified and accounted for.

  **Historical Context:**
  Take these reminders into account when forming the plan:
  {records}

  **Available Actions:**
  Here are the all actions you can use to achieve the goal:
  - **turnright**: Rotate the robotic arm to the right.
  - **turnleft**: Rotate the robotic arm to the left.
  - **walkforward**: Advance the robotic arm forward.
  - **walktowards <obj>**: Move the robotic arm towards the specified object.
  - **grab <obj>**: Grasp the specified object. Release any held item before grabbing a new one.
  - **switchon <obj>**: Activate the specified object. 
  - **switchoff <obj>**: Deactivate the specified object.
  - **open <obj>**: Open the specified object.
  - **close <obj>**: Close the specified object.
  - **lookat <obj>**: Focus on the specified object.
  - **find <obj>**: Locate the specified object.
  - **turnto <obj>**: Orient towards the specified object.
  - **pointat <obj>**: Point to the specified object.
  - **putin <obj1> <obj2>**: Place the first object into the second.
  - **puton <obj1> <obj2>**: Place the first object on top of the second.
  - **putback <obj1> <obj2>**: Return the first object into the second.
  - **push <obj>**: Push the specified object.
  - **pull <obj>**: Pull the specified object.
  - **rotate <obj>**: Rotate the specified object.
  - **tilt <obj>**: Tilt the specified object.
  - **cut <obj>**: Cut the specified object.
  - **flip <obj>**: Flip the specified object.
  - **wait <n>**: Pause for n minutes.
  - **done**: Signal task completion.

  **Output Structure:**
  - Formulate a step-by-step action plan using only the actions listed above.
  - Each step should adhere to the following syntax:
      '''
      [action] ("object1", (optional: "object2"))
      '''
  - Conclude the plan with the **done()** action.
  - In the action plan, briefly describe the color or shape of the object

  **Example:**
  For the goal "Put the fork into the cup":
      '''
      def Put_the_fork_into_the_cup():
          find ("grey fork")
          walktowards ("grey fork")
          grab ("grey fork")
          find ("red cup")
          walktowards ("red cup")
          putin ("grey fork","red cup")
          done()
      '''
  Your answers will be used directly to guide the robot's activities, so you only need to answer the function part

prompt_template_norecords: |
  You are controlling a one-armed robot.

  **Task Objective:**
  Your task is to complete the following goal:
  {goal}

  **Current Environment:**
  Before planning actions, analyze the image carefully, ensuring that all objects, particularly those relevant to the goal, are identified and accounted for.

  **Available Actions:**
  Here are the all actions you can use to achieve the goal:
  - **turnright**: Rotate the robotic arm to the right.
  - **turnleft**: Rotate the robotic arm to the left.
  - **walkforward**: Advance the robotic arm forward.
  - **walktowards <obj>**: Move the robotic arm towards the specified object.
  - **grab <obj>**: Grasp the specified object. Release any held item before grabbing a new one.
  - **switchon <obj>**: Activate the specified object. 
  - **switchoff <obj>**: Deactivate the specified object.
  - **open <obj>**: Open the specified object.
  - **close <obj>**: Close the specified object.
  - **lookat <obj>**: Focus on the specified object.
  - **find <obj>**: Locate the specified object.
  - **turnto <obj>**: Orient towards the specified object.
  - **pointat <obj>**: Point to the specified object.
  - **putin <obj1> <obj2>**: Place the first object into the second.
  - **puton <obj1> <obj2>**: Place the first object on top of the second.
  - **putback <obj1> <obj2>**: Return the first object into the second.
  - **push <obj>**: Push the specified object.
  - **pull <obj>**: Pull the specified object.
  - **rotate <obj>**: Rotate the specified object.
  - **tilt <obj>**: Tilt the specified object.
  - **cut <obj>**: Cut the specified object.
  - **flip <obj>**: Flip the specified object.
  - **wait <n>**: Pause for n minutes.
  - **done**: Signal task completion.

  **Output Structure:**
  - Formulate a step-by-step action plan using only the actions listed above.
  - Each step should adhere to the following syntax:
      '''
      [action] ("object1", (optional: "object2"))
      '''
  - Conclude the plan with the **done()** action.
  - In the action plan, briefly describe the color or shape of the object

  **Example:**
  For the goal "Put the fork into the cup":
      '''
      def Put_the_fork_into_the_cup():
          find ("grey fork")
          walktowards ("grey fork")
          grab ("grey fork")
          find ("red cup")
          walktowards ("red cup")
          putin ("grey fork","red cup")
          done()
      '''
  Your answers will be used directly to guide the robot's activities, so you only need to answer the function part


AlignBot_Prompt: |
  You are controlling a one-armed robot.

  **Task Objective:**
  Your task is to complete the following goal:
  {goal}

  **Current Environment:**
  Please analyze the image carefully, ensuring that all objects, particularly those relevant to the goal, are identified and accounted for.

  **Past Success Example:**
  Here are some past success Example for current goal:
  {Successes}
    
  **Reminders:**
  You need to pay careful attention to the following reminders from user {username}:
  {Reminders}

  **Available Actions:**
  Here are the all actions you can use to achieve the goal:
  - **turnright**: Rotate the robotic arm to the right.
  - **turnleft**: Rotate the robotic arm to the left.
  - **walkforward**: Advance the robotic arm forward.
  - **walktowards <obj>**: Move the robotic arm towards the specified object.
  - **grab <obj>**: Grasp the specified object. Release any held item before grabbing a new one.
  - **switchon <obj>**: Activate the specified object.
  - **switchoff <obj>**: Deactivate the specified object.
  - **open <obj>**: Open the specified object.
  - **close <obj>**: Close the specified object.
  - **lookat <obj>**: Focus on the specified object.
  - **find <obj>**: Locate the specified object.
  - **turnto <obj>**: Orient towards the specified object.
  - **pointat <obj>**: Point to the specified object.
  - **putin <obj1> <obj2>**: Place the first object into the second.
  - **puton <obj1> <obj2>**: Place the first object on top of the second.
  - **putback <obj1> <obj2>**: Return the first object into the second.
  - **push <obj>**: Push the specified object.
  - **pull <obj>**: Pull the specified object.
  - **rotate <obj>**: Rotate the specified object.
  - **tilt <obj>**: Tilt the specified object.
  - **cut <obj>**: Cut the specified object.
  - **flip <obj>**: Flip the specified object.
  - **wait <n>**: Pause for n minutes.
  - **done**: Signal task completion.

  **Output Structure:**
  - Formulate a step-by-step action plan using only the actions listed above.
  - Each step should adhere to the following syntax:
      '''
      [action] ("object1", (optional: "object2"))
      '''
  - Conclude the plan with the **done()** action.
  - In the action plan, briefly describe the color or shape of the object

  **Example:**
  For the goal "Put the fork into the cup":
      '''
      def Put_the_fork_into_the_cup():
          find ("grey fork")
          walktowards ("grey fork")
          grab ("grey fork")
          find ("red cup")
          walktowards ("red cup")
          putin ("grey fork","red cup")
          done()
      '''
  Your answers will be used directly to guide the robot's activities, so you only need to answer the function part

AlignBot_Prompt_re: |
  You are controlling a one-armed robot.

  **Task Objective:**
  Your task is to complete the following goal:
  {goal}

  **Current Environment:**
  Please analyze the image carefully, ensuring that all objects, particularly those relevant to the goal, are identified and accounted for.

  **User Feedback:**
  These are the plans you generated in the previous rounds, and the user provided feedback for these plans:
  {records}
  You need to pay special attention to user feedback to make sure you don not make the same mistakes.
  
  **Available Actions:**
  Here are the all actions you can use to achieve the goal:
  - **turnright**: Rotate the robotic arm to the right.
  - **turnleft**: Rotate the robotic arm to the left.
  - **walkforward**: Advance the robotic arm forward.
  - **walktowards <obj>**: Move the robotic arm towards the specified object.
  - **grab <obj>**: Grasp the specified object. Release any held item before grabbing a new one.
  - **switchon <obj>**: Activate the specified object.
  - **switchoff <obj>**: Deactivate the specified object.
  - **open <obj>**: Open the specified object.
  - **close <obj>**: Close the specified object.
  - **lookat <obj>**: Focus on the specified object.
  - **find <obj>**: Locate the specified object.
  - **turnto <obj>**: Orient towards the specified object.
  - **pointat <obj>**: Point to the specified object.
  - **putin <obj1> <obj2>**: Place the first object into the second.
  - **puton <obj1> <obj2>**: Place the first object on top of the second.
  - **putback <obj1> <obj2>**: Return the first object into the second.
  - **push <obj>**: Push the specified object.
  - **pull <obj>**: Pull the specified object.
  - **rotate <obj>**: Rotate the specified object.
  - **tilt <obj>**: Tilt the specified object.
  - **cut <obj>**: Cut the specified object.
  - **flip <obj>**: Flip the specified object.
  - **wait <n>**: Pause for n minutes.
  - **done**: Signal task completion.

  **Output Structure:**
  - Formulate a step-by-step action plan using only the actions listed above.
  - Each step should adhere to the following syntax:
      '''
      [action] ("object1", (optional: "object2"))
      '''
  - Conclude the plan with the **done()** action.
  - In the action plan, briefly describe the color or shape of the object

  **Example:**
  For the goal "Put the fork into the cup":
      '''
      def Put_the_fork_into_the_cup():
          find ("grey fork")
          walktowards ("grey fork")
          grab ("grey fork")
          find ("red cup")
          walktowards ("red cup")
          putin ("grey fork","red cup")
          done()
      '''
  Your answers will be used directly to guide the robot's activities, so you only need to answer the function part

GPT-4o Prompt without Successes: |
  You are controlling a one-armed robot.

  **Task Objective:**
  Your task is to complete the following goal:
  {goal}

  **Current Environment:**
  Please analyze the image carefully, ensuring that all objects, particularly those relevant to the goal, are identified and accounted for.
    
  **Reminders:**
  You need to pay careful attention to the following reminders:
  {Reminders}

  **User Feedback:**
  These are the plans you generated in the previous rounds, and the user provided feedback for these plans:
  {records}
  You need to pay special attention to user feedback to make sure you don not make the same mistakes.
  
  **Available Actions:**
  Here are the all actions you can use to achieve the goal:
  - **turnright**: Rotate the robotic arm to the right.
  - **turnleft**: Rotate the robotic arm to the left.
  - **walkforward**: Advance the robotic arm forward.
  - **walktowards <obj>**: Move the robotic arm towards the specified object.
  - **grab <obj>**: Grasp the specified object. Release any held item before grabbing a new one.
  - **switchon <obj>**: Activate the specified object.
  - **switchoff <obj>**: Deactivate the specified object.
  - **open <obj>**: Open the specified object.
  - **close <obj>**: Close the specified object.
  - **lookat <obj>**: Focus on the specified object.
  - **find <obj>**: Locate the specified object.
  - **turnto <obj>**: Orient towards the specified object.
  - **pointat <obj>**: Point to the specified object.
  - **putin <obj1> <obj2>**: Place the first object into the second.
  - **puton <obj1> <obj2>**: Place the first object on top of the second.
  - **putback <obj1> <obj2>**: Return the first object into the second.
  - **push <obj>**: Push the specified object.
  - **pull <obj>**: Pull the specified object.
  - **rotate <obj>**: Rotate the specified object.
  - **tilt <obj>**: Tilt the specified object.
  - **cut <obj>**: Cut the specified object.
  - **flip <obj>**: Flip the specified object.
  - **wait <n>**: Pause for n minutes.
  - **done**: Signal task completion.

  **Output Structure:**
  - Formulate a step-by-step action plan using only the actions listed above.
  - Each step should adhere to the following syntax:
      '''
      [action] ("object1", (optional: "object2"))
      '''
  - Conclude the plan with the **done()** action.
  - In the action plan, briefly describe the color or shape of the object

  **Example:**
  For the goal "Put the fork into the cup":
      '''
      def Put_the_fork_into_the_cup():
          find ("grey fork")
          walktowards ("grey fork")
          grab ("grey fork")
          find ("red cup")
          walktowards ("red cup")
          putin ("grey fork","red cup")
          done()
      '''
  Your answers will be used directly to guide the robot's activities, so you only need to answer the function part

correction_prompt: |
  You are controlling a robotic arm. Just now you proposed the motion planning of the robotic arm according to the requirements, but the user needs to make instructions on this. You need to extract keywords from the instructions provided by users.:
  The user name is: {username1}
  The image path is: {image_path1}
  The goal is: {goal1}
  The time: {timestep1}
  The current plan step is as follows: {planstep1}. 
  The user has provided the following instructions: {instructions1}.

  you need save the data as .json, and save all keys as follow: "username","time","goal","image path","items","color","state of items","failure case","user instructions".
  "items" should contain all objects showed in the picture, and if there are duplicate items, you need to number them, for example, "items": ["apple","bowl1","bowl2"]. In "color" part you need to list the colors of all items, and use format like:"item":"color". "state of items" should include the working status of all items and the spatial relationship between them, for example, "state of items": "fridge is CLOSED, faucet is OFF, stove is OFF". "failure case" is the current plan step shown above. Fill instructions in "user instructions".
  Analyze the status of the items and use the format as in the following example:
  door is OPEN, clothespile is CLOSED, coffeemaker is OFF, microwave is OFF and CLOSED, lightswitch is ON, kitchencabinet is CLOSED, fridge is CLOSED, faucet is OFF, tv is OFF, kitchencounter is CLOSED, coffeepot is CLOSED, green square is ON the red square, plate is ON the table, apple is ON the plate, fork is IN the cap, avocado is NEXT TO the cap, plate is IN the microwave, blue bowl is UPSIDE DOWN on the counter.
  
  Your reply will be saved directly as a json file, so I only need you to reply to the subject part of the json.

correction_prompt_url: |
  You are controlling a robotic arm. Just now you proposed the motion planning of the robotic arm according to the requirements, but the user needs to make instructions on this. You need to extract keywords from the instructions provided by users.:
  The user name is: {username1}
  The image url link: {url_link1}
  The goal is: {goal1}
  The time: {timestep1}
  The current plan step is as follows: {planstep1}. 
  The user has provided the following instructions: {instructions1}.

  you need save the data as .json, and save all keys as follow: "username","time","goal","url link","items","color","state of items","failure case","user instructions".
  "items" should contain all objects showed in the picture, and if there are duplicate items, you need to number them, for example, "items": ["apple","bowl1","bowl2"]. In "color" part you need to list the colors of all items, and use format like:"item":"color". "state of items" should include the working status of all items and the spatial relationship between them, for example, "state of items": "fridge is CLOSED, faucet is OFF, stove is OFF". "failure case" is the current plan step shown above. Fill instructions in "user instructions".
  Analyze the status of the items and use the format as in the following example:
  door is OPEN, clothespile is CLOSED, coffeemaker is OFF, microwave is OFF and CLOSED, lightswitch is ON, kitchencabinet is CLOSED, fridge is CLOSED, faucet is OFF, tv is OFF, kitchencounter is CLOSED, coffeepot is CLOSED, green square is ON the red square, plate is ON the table, apple is ON the plate, fork is IN the cap, avocado is NEXT TO the cap, plate is IN the microwave, blue bowl is UPSIDE DOWN on the counter.
  
  Your reply will be saved directly as a json file, so I only need you to reply to the subject part of the json.


finalcase_prompt: |
  You are controlling a robotic arm. Just now you proposed the motion planning of the robotic arm according to the requirements, but the user needs to make instructions on this. You need to extract keywords from the instructions provided by users.:
  The user name is: {username1}
  The image path is: {image_path1}
  The goal is: {goal1}
  The time: {timestep1}
  The final correct plan step is as follows: {planstep1}. 

  you need save the data as .json, and save all keys as follow: "username","time","goal","image path","items","color","state of items","final correct case".
  "items" should contain all objects showed in the picture. If there are duplicate items, you need to number these same items, for example, "items": ["apple","bowl1","bowl2"]. In "color" part you need to list the colors of all items, and use format like:"item":"color". "state of items" should include the working status of all items and the spatial relationship between them, for example, "state of items": "fridge is CLOSED, faucet is OFF, stove is OFF". "final correct case" is the current plan step shown above.
  Analyze the status of the items and use the format as in the following example:
  door is OPEN, clothespile is CLOSED, coffeemaker is OFF, microwave is OFF and CLOSED, lightswitch is ON, kitchencabinet is CLOSED, fridge is CLOSED, faucet is OFF, tv is OFF, kitchencounter is CLOSED, coffeepot is CLOSED, green square is ON the red square, plate is ON the table, apple is ON the plate, fork is IN the cap, avocado is NEXT TO the cap, plate is IN the microwave, blue bowl is UPSIDE DOWN on the counter.

  Your reply will be saved directly as a json file, so I only need you to reply to the subject part of the json.

finalcase_prompt_url: |
  You are controlling a robotic arm. Just now you proposed the motion planning of the robotic arm according to the requirements, but the user needs to make instructions on this. You need to extract keywords from the instructions provided by users.:
  The user name is: {username1}
  The image url link: {url_link1}
  The goal is: {goal1}
  The time: {timestep1}
  The final correct plan step is as follows: {planstep1}. 

  you need save the data as .json, and save all keys as follow: "username","time","goal","url link","items","color","state of items","final correct case".
  "items" should contain all objects showed in the picture. If there are duplicate items, you need to number these same items, for example, "items": ["apple","bowl1","bowl2"]. In "color" part you need to list the colors of all items, and use format like:"item":"color". "state of items" should include the working status of all items and the spatial relationship between them, for example, "state of items": "fridge is CLOSED, faucet is OFF, stove is OFF". "final correct case" is the current plan step shown above.
  Analyze the status of the items and use the format as in the following example:
  door is OPEN, clothespile is CLOSED, coffeemaker is OFF, microwave is OFF and CLOSED, lightswitch is ON, kitchencabinet is CLOSED, fridge is CLOSED, faucet is OFF, tv is OFF, kitchencounter is CLOSED, coffeepot is CLOSED, green square is ON the red square, plate is ON the table, apple is ON the plate, fork is IN the cap, avocado is NEXT TO the cap, plate is IN the microwave, blue bowl is UPSIDE DOWN on the counter.

  Your reply will be saved directly as a json file, so I only need you to reply to the subject part of the json.


LLava_prompt: |
  You are a multimodal large language model that processes images and instructions. Your task is to provide step-by-step reminders to execute the given instruction. The reminders should be detailed, reflecting user-specific information and the current scene. 
  
  Follow these guidelines:

  1. **Personalized Reminders:**
    - Generate reminders based on user
    - Include user preferences and specific rules for item placement.
    - Mention any habitual actions the user typically follows.

  2. **Scene Reminders:**
    - Generate reminders based on picture and goal
    - Describe all items visible in the image, including their status, position, and any notable details.
    - Reference any past successful scenarios or considerations similar to the current scene.

  3. **Step-by-Step Action Reminders:**
    - Generate reminders based on picture and goal
    - Provide a detailed, step-by-step reminder for each action, ensuring clarity and precision.
    - Consider the robot’s single-arm constraint: remind that only one action can be performed at a time.
    - Include any specific instructions related to the current scene and the user's preferences.

  **Output Structure:**
  1. **User Preferences:**
    - [Include relevant personalized information based on the user’s habits or rules.]

  2. **Scene Description:**
    - [Provide a detailed description of the items and their status in the image.]

  3. **Step-by-Step Action Reminders:**
    - Reminder 1: [Detailed reminder for the first action, considering robot’s single-arm constraint.]
    - Reminder 2: [Next detailed reminder.]
    - ...
    - Final Reminder: [Final detailed reminder, ensuring all tasks are completed according to the user’s preferences and scene specifics.]

  **Few-Shot Examples:**

  Example 1:
  - Carefully identify the objects on the table in the picture and put them into the drawers. 
  - Put drinks in drawer 1. 
  - Put kitchen utensils in drawer 3. The kitchen utensils in the picture are a white tray and a kitchen knife. Put them in drawer 3.
  - The yellow item is actually a tea beverage. You should open drawer 1 before grabbing things.

  Example 2:
  - Put snacks in drawer 2 and kitchen utensils in drawer 3.
  - The kitchen utensils in the picture are a cutting board and a fruit knife.
  - The pink fruit knife is on the cutting board. Put them into drawer 3. You should open drawer 3 before grabbing things.

  Example 3:
  - Put drinks in drawer 1.
  - Drawer 1 is already open. You do not need to open it again. Close drawer 1 at the end.

  Ensure each reminder is clear, follows the constraints, and aligns with the user's preferences and the scene description.
  {username} wants robot to {goal}. If you were {username}, what reminders would you give to the robot?


LLava_prompt_1: |
  You are a multimodal large language model that processes images and instructions. Your task is to provide step-by-step reminders to execute the given instruction. The reminders should be detailed, reflecting user-specific information and the current scene. 
  {username} wants robot to {goal}. If you were {username}, what reminders would you give to the robot?

  **Few-Shot Examples:**

  Example 1:
  - Carefully identify the objects on the table in the picture and put them into the drawers. 
  - Put drinks in drawer 1. 
  - Put kitchen utensils in drawer 3. The kitchen utensils in the picture are a white tray and a kitchen knife. Put them in drawer 3.
  - The yellow item is actually a tea beverage. You should open drawer 1 before grabbing things.

  Example 2:
  - Put snacks in drawer 2 and kitchen utensils in drawer 3.
  - The kitchen utensils in the picture are a cutting board and a fruit knife.
  - The pink fruit knife is on the cutting board. Put them into drawer 3. You should open drawer 3 before grabbing things.

  Example 3:
  - Put drinks in drawer 1.
  - Drawer 1 is already open. You do not need to open it again. Close drawer 1 at the end.

  Ensure each reminder is clear, follows the constraints, and aligns with the user's preferences and the scene description.


LLava_prompt_2: |
  {username} wants robot to {goal}. If you were {username}, what reminders would you give to the robot?